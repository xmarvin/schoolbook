<div class="clearfix" id="page">

      
      
                    <h1 class="page-title">31. Перебазирование как альтернатива слиянию</h1>
                        
                    <div class="region region-content">
    <div class="block-system" id="block-system-main">

    
  <div class="content">
    <div typeof="sioc:Item foaf:Document" about="/rebasing_vs_merging" class="node node-book clearfix" id="node-32">

  <div class="node-header">
            
      </div> <!-- /.node-header -->

  <div class="content clearfix">
        <div class="field field-name-body field-type-text-with-summary field-label-hidden"><div class="field-items"><div property="content:encoded" class="field-item even"><h3>Цели</h3>
<ul><li>Узнать различия между перебазированием и слиянием.</li>
</ul><h3>Обсуждение</h3>
<p>Давайте рассмотрим различия между слиянием и перебазированием. Для того, чтобы это сделать, нам нужно вернуться в репозиторий в момент до первого слияния, а затем повторить те же действия, но с использованием перебазирования вместо слияния.</p>
<p>Мы будем использовать команду <code>reset</code> для возврата веток к предыдущему состоянию.</p>
</div></div></div>
  </div>

  
</div>
  </div>
</div>
  </div>
        <div class="region region-content-bottom">
    <div class="block block-block" id="block-block-4">

    
  <div class="content">
    <div style="left: 390px;position: absolute;top: -50px;"><div id="___plusone_0" style="height: 20px; width: 90px; display: inline-block; text-indent: 0pt; margin: 0pt; padding: 0pt; background: none repeat scroll 0% 0% transparent; border-style: none; float: none; line-height: normal; font-size: 1px; vertical-align: baseline;"><iframe width="100%" scrolling="no" frameborder="0" title="+1" vspace="0" tabindex="-1" style="position: static; left: 0pt; top: 0pt; width: 90px; margin: 0px; border-style: none; height: 20px; visibility: visible;" src="https://plusone.google.com/u/0/_/+1/fastbutton?url=http%3A%2F%2Fgithowto.com%2Frebasing_vs_merging&amp;size=medium&amp;count=true&amp;annotation=&amp;hl=en-US&amp;jsh=r%3Bgc%2F24479126-6666cb8c#id=I1_1319301437074&amp;parent=http%3A%2F%2Fgithowto.com&amp;rpctoken=924853461&amp;_methods=onPlusOne%2C_ready%2C_close%2C_open%2C_resizeMe" name="I1_1319301437074" marginwidth="0" marginheight="0" id="I1_1319301437074" hspace="0" allowtransparency="true"></iframe></div></div>  </div>
</div>
<div class="block block-block" id="block-block-3">

    
  <div class="content">
    <div style="left:480px;position: absolute;top: -50px;"><iframe scrolling="no" frameborder="0" allowtransparency="true" src="http://platform.twitter.com/widgets/tweet_button.html#_=1319301436835&amp;count=horizontal&amp;id=twitter_tweet_button_0&amp;lang=en&amp;original_referer=http%3A%2F%2Fgithowto.com%2Frebasing_vs_merging&amp;text=%D0%A1%D1%83%D0%BF%D0%B5%D1%80-%D1%82%D1%83%D1%80-%D0%BE%D0%B1%D1%83%D1%87%D0%B0%D0%BB%D0%BA%D0%B0%20GIT&amp;url=http%3A%2F%2Fgithowto.com%2F&amp;via=githowto" class="twitter-share-button twitter-count-horizontal" style="width: 110px; height: 20px;" title="Twitter For Websites: Tweet Button"></iframe>
<script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></div>  </div>
</div>
<div class="block block-block" id="block-block-1">

    
  <div class="content">
    <div style="left: 700px;position: absolute;top: -50px;">
<iframe scrolling="no" frameborder="0" allowtransparency="true" style="border:none; overflow:hidden; width:150px; height:21px;" src="http://www.facebook.com/plugins/like.php?app_id=245589052121813&amp;href=http%3A%2F%2Fgithowto.com%2F&amp;send=false&amp;layout=button_count&amp;width=150&amp;show_faces=false&amp;action=like&amp;colorscheme=light&amp;font=arial&amp;height=21"></iframe>
</div>  </div>
</div>
<div class="block block-block" id="block-block-2">

    
  <div class="content">
<div id="usage"><div class="num"><span>№</span>1</div><div class="usage_example"><pre><b class="description">Перенести ветку в другое место
o---o---o---o---o  master
     \
      o---o---o---o---o  next
                       \
                        o---o---o  topic

Превратится в:
o---o---o---o---o  master
    |            \
    |             o'--o'--o'  topic
     \
      o---o---o---o---o  next
</b></pre><pre><code class='bash'>$ git rebase --onto master next topic
</code></pre></div></div><div style="cehr"><center>-----------</center></div><div id="links">

	  Источник: <br>
	 git help rebase
	 </div>

    </div>
          </div>
            </div>
    </div>

         <h2>git rebase — построение ровной линии коммитов</h2>

        <p>
Предположим, разработчик завел дополнительную ветку для разработки отдельной
возможности и совершил в ней несколько коммитов. Одновременно по какой-либо
причине в основной ветке также были совершены коммиты: например, в нее были
залиты изменения с удаленного сервера; либо сам разработчик совершал в ней
коммиты.   </p>
      <p>
В принципе, можно обойтись обычным git merge. Но тогда усложняется сама линия
разработки, что бывает нежелательно в слишком больших проектах, где участвует
множество разработчиков.
      </p> <p>
Предположим, имеется две ветки, master и топик, в каждой из которых было совершенно несколько коммитов начиная с момента ветвления.
Команда git rebase берет коммиты из ветки topic и накладывает их на последний коммит ветки
master:
      </p>  <p>
git-rebase master topic — вариант, в котором явно указывается, что и куда
прикладывается.
git-rebase master — на master накладывается активная в настоящий момент
ветка.


     </p>  <p>
После использования команды история становится линейной. При возникновении
конфликтов при поочередном накладывании коммитов
работа команды будет останавливаться, а в проблемные местах файлов появятся
соответствующие метки. После редактирования — разрешения конфликтов — файлы
следует внести в индекс командой git add и продолжить наложение следующих
коммитов командой git rebase --continue. Альтернативными выходами будут команды
git rebase --skip (пропустить наложение коммита и перейти к следующему) или git
rebase --abort (отмена работы команды и всех внесенных изменений).
    </p> <p>
С ключом -i (--interactive) команда будет работать в интерактивном
режиме. Пользователю будет предоставлена возможность определить порядок внесения
изменений, автоматически будет вызывать редактор для разрешения конфликтов и так
далее.
   </p>

2.2.5 git cherry-pick — применение к дереву проекта изменений, внесенных отдельным коммитом

  <p>
Если ведется сложная история разработки, с несколькими длинными ветками
разработками, может возникнуть необходимость в применении изменений, внесенных
отдельным коммитом одной ветки, к дереву другой (активной в настоящий момент).
    </p><p>
git cherry-pick BUG_FIX_TAG — изменения, внесенные указанным коммитом будут
применены к дереву, автоматически проиндексированы и станут коммитом в активной
ветке.
    </p><p>
git cherry-pick BUG_FIX_TAG -n — ключ "-n" показывает, что изменения надо
просто применить к дереву проекта без индексации и создания коммита.

    </p>