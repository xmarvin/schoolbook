<h4>git diff — отличия между деревьями проекта, коммитами и т.д.</h4>


	<p>Своего рода подмножеством команды git log можно считать команду git diff,<br />определяющую изменения между объектами в проекте: деревьями (файлов и<br />директорий).</p>


	<p>Покажет изменения, не внесенные в индекс:<br /><pre>
git diff
</pre><br />Изменения, внесенные в индекс:<br /><pre>
git diff --cached
</pre><br />Изменения в проекте по сравнению с последним коммитом:<br /><pre>
git diff HEAD
</pre><br />Предпоследним коммитом:<br /><pre>
git diff HEAD^
</pre><br />Можно сравнивать «головы» веток:<br /><pre>
git diff master..experimental
</pre><br />Ну или активную ветку с какой-либо:<br /><pre>
git diff experimental
</pre></p>


	<h4>git show — показать изменения, внесенные отдельным коммитом</h4>


	<p>Посмотреть изменения, внесенные любым коммитом в истории можно командой git show:<br /><pre>
git show COMMIT_TAG
</pre></p>


	<h4>git blame и git annotate — команды, помогающие отслеживать изменения файлов</h4>


	<p>При работе в команде часто требуется выяснить, кто именно написал конкретный<br />код. Удобно использовать команду git blame, выводящую построчную информацию о<br />последнем коммите, коснувшемся строки, имя автора и хэш коммита:<br /><pre>
git blame README
</pre></p>


	<p>Можно указать и конкретные строки для отображения:<br /><pre>
git blame -L 2,+3 README — выведет информацию по трем строкам, начиная со второй.
</pre></p>


	<p>Аналогично работает команда git annotate, выводящая и строки, и информацию о<br />коммитах, их коснувшихся:<br /><pre>
git annotate README
</pre></p>


	<h4>git grep — поиск слов по проекту, состоянию проекта в прошлом</h4>


	<p>git grep, в целом, просто дублирует функционал знаменитой юниксовой<br />команды. Однако, он позволяет слова и их сочетания искать в прошлом проекта, что<br />бывает очень полезно.</p>


	<p>Поиск слова tst в проекте:<br /><pre>
git grep tst
</pre></p>


	<p>Подсчитать число упоминаний tst в проекте:<br /><pre>
git grep -с tst
</pre></p>


	<p>Поиск в старой версии проекта:<br /><pre>
git grep tst v1
</pre></p>


	<p>Команда позволяет использовать логическое И и ИЛИ.</p>


	<p>Найти строки, где упоминаются и первое слово, и второе:<br /><pre>
git grep -e 'first' --and -e 'another'
</pre></p>


	<p>Найти строки, где встречается хотя бы одно из слов:<br /><pre>
git grep --all-match -e 'first' -e 'second'
</pre></p>