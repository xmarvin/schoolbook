<h3>
<strong>4. Создание первого проекта</strong>
</h3>
<p>
<strong>4.1. Создание проекта Ruby on Rails</strong>
<br>
Проектом может являться любая папка в которой содержатся исходные коды ваших программ. Однако это не осначает, что git может использовать только в целях связанных с программированием, известны случаи, когда git использовался при написании книг и статей (но это скорей исключение). Кстати, некоторые программы используемые в различных издательствах имеют от части похожий функционал, который позволяет просмореть историю редактирования. Ладно, сейчас не об этом. Допустим, наш проект &ndash; это приложение на Ruby on Rails. Создаем проект Ruby on Rails:
</p>
<p>
<span style="color: #008000;">$ rails new git_example</span>
</p>
<p>
<strong>4.2. Создание репозитория</strong>
<br>
Теперь, когда у нас имеется папка с кодами нашего приложения, нам необходимо объявить ее репозиторием. Это необходимо для того, чтобы Git начал мониторинг за содержимым папки &ndash; файлами, в которых содержится код нашего проекта. Для того, чтобы объявить папку репозиторием в Git имеется специальная команда git init:
</p>
<p>
<span style="color: #008000;">
$
<span style="color: #99cc00;"> cd git_example</span>
<br>
$
<span style="color: #99cc00;">git init</span>
<br>
Initialized empty Git repository in /home/vladimir/git_example/.git/
</span>
</p>
<p>
<strong>4.3. Добавление проекта на Ruby on Rails в Git репозиторий</strong>
</p>
<p>
Если мы воспользуемся сейчас командой
<strong>git status</strong>
, то мы увидем информацию о статусе репозитория, где содержимое нашего проекта будет помечено как «
<span style="color: #000080;">Untracked files</span>
«, то есть git еще не отслеживает изменения в этих файлах. Для того, чтобы заставить Git это делать, нам необходимо добавить наш проект на Ruby on Rails в репозиторий:
</p>
<p>
<span style="color: #008000;">$ git add .</span>
</p>
<p>
Теперь выполнив команду
<span style="color: #000080;">git status</span>
мы увидим все файлы составляющие наш проект с метками «new file», наконец то Git принялся отслеживать изменения в нашем проекте.
</p>
<p>
Обратите внимание на точку после команды
<strong>git add</strong>
, точка указывает на то, что мы добавляем полностью все содержимое папки. Есть еще такой пример использования команды
<span style="color: #000080;">git add</span>
:
</p>
<p>
<span style="color: #008000;">$ git add ruby_code.rb</span>
</p>
<p>Это означает, что в репозиторий добавляется один единственный файл ruby_code.rb.</p>


<div property="content:encoded" class="field-item even"><h3>Цели</h3>
<ul><li>Научиться создавать git репозиторий с нуля.</li>
</ul><h2><em>01</em> Создайте страницу «Hello, World»</h2>
<p>Начните работу в пустом рабочем каталоге (например Work, если вы скачали архив с предыдущего шага) с создания пустого каталога с именем «hello», затем войдите внего и создайте там файл с именем <code>hello.html</code> с таким содержанием.</p>
<h4>Выполните:</h4>
<pre class="instructions">mkdir hello
cd hello
touch hello.html</pre>

<h4>Файл: <em>hello.html</em></h4>

<pre class="file">Hello, World</pre>

<h2><em>02</em> Создайте репозиторий</h2>

<p>Теперь у вас есть каталог с одним файлом. Чтобы создать git репозиторий из этого каталога, выполните команду git init.</p>

<h4>Выполните:</h4>

<pre class="instructions">git init</pre>

<h4>Результат:</h4>

<pre class="sample">$ git init
Initialized empty Git repository in /Users/marina/Documents/Presentations/githowto/auto/hello/.git/
</pre>

<h2><em>03</em> Добавьте страницу в репозиторий</h2>

<p>Теперь давайте добавим в репозиторий страницу «Hello, World».</p>

<h4>Выполните:</h4>

<pre class="instructions">git add hello.html
git commit -m "First Commit"</pre>

<p>Вы увидите …</p>

<h4>Результат:</h4>

<pre class="sample">$ git add hello.html
$ git commit -m "First Commit"
[master (root-commit) 911e8c9] First Commit
 1 files changed, 1 insertions(+), 0 deletions(-)
 create mode 100644 hello.html</pre></div>
 
 <hr>
 
 <div property="content:encoded" class="field-item even"><h3>Цели</h3>
<ul><li>Научиться проверять состояние репозитория</li>
</ul><h2><em>01</em> Проверьте состояние репозитория</h2>
<p>Используйте команду <code>git status</code>, чтобы проверить текущее состояние репозитория.</p>
<h4>Выполните:</h4>
<pre class="instructions">git status</pre>

<p>Вы увидите</p>

<h4>Результат:</h4>

<pre class="sample">$ git status
# On branch master
nothing to commit (working directory clean)</pre>

<p>Команда проверки состояния сообщит, что коммитить нечего. Это означает, что в репозитории хранится текущее состояние рабочего каталога, и нет никаких изменений, ожидающих записи.</p>

<p>Мы будем использовать команду <code>git status</code>, чтобы продолжать отслеживать состояние репозитория и рабочего каталога.</p></div>


 <hr>
 <div class="field-items"><div property="content:encoded" class="field-item even"><h3>Цели</h3>
<ul><li>Научиться отслеживать состояние рабочего каталога</li>
</ul><h2><em>01</em> Измените страницу «Hello, World»</h2>
<p>Добавим кое-какие HTML-теги к нашему приветствию. Измените содержимое файла на:</p>
<h4>Файл: <em>hello.html</em></h4>
<pre class="file"><strong>&lt;h1&gt;</strong>Hello, World!<strong>&lt;/h1&gt;</strong></pre>

<h2><em>02</em> Проверьте состояние</h2>

<p>Теперь проверьте состояние рабочего каталога.</p>

<h4>Выполните:</h4>

<pre class="instructions">git status</pre>

<p>Вы увидите …</p>

<h4>Результат:</h4>

<pre class="sample">$ git status
# On branch master
# Changes not staged for commit:
#   (use "git add &lt;file&gt;..." to update what will be committed)
#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
#
#	modified:   hello.html
#
no changes added to commit (use "git add" and/or "git commit -a")</pre>

<p>Первое, что нужно заметить, это то, что git знает, что файл <code>hello.html</code> был изменен, но при этом эти изменения еще не зафиксированы в репозитории.</p>

<p>Также обратите внимание на то, что сообщение о состоянии дает вам подсказку о том, что нужно делать дальше. Если вы хотите добавить эти изменения в репозиторий, используйте команду <code>git add</code>. В противном случае используйте команду <code>git сheckout</code> для отмены изменений.</p>

<h2><em>03</em> А далее...</h2>

<p>Давайте проиндексируем изменения.</p></div></div>
 
   <a href="/books/git/chapters/commits" > Commits </a>