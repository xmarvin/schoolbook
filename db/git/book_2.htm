<div>
<h3>Кстати, для начала, установите Git:</h3>
<div class="flm">
    <strong>Mac</strong><br>
    <a href="http://code.google.com/p/git-osx-installer/">Git for Mac OS X</a>
</div>

<div class="flm">
    <strong>Windows</strong><br>
    <a href="http://code.google.com/p/msysgit/">msysgit</a>
</div>

<img src="/gridfs/image/2-1.png"/>
<div>
<p><strong>2.1 Зависимости Git</strong></p>
<p>Для нормальной работы с Git у вас должны быть установлены следующие библиотеки: <span
        style="color: #000080;">curl</span>, <span style="color: #000080;">openssl</span> и <span
        style="color: #000080;">zlib</span></p>
<p><strong>2.2. Установка Git из исходников:</strong><br>
    Для установки GIT из исходников на операционные системы семейства UNIX, вам следует для начала скачать исходники,
    распаковать архив и выполнить следующие команды в консоли для установки:</p>
<p><span style="color: #008000;">$ make prefix=/usr all</span></p>
<p>или</p>
<p><span style="color: #008000;">$ make prefix=/usr install</span></p>
<p><strong>2.3. Установка Git на Linux</strong></p>
<p>Для установки Git на Ubuntu следует просто выполнить в консоли команду:</p>
<p><span style="color: #008000;">$ apt-get install git-core</span></p>
<p><strong>2.4. Установка Git на OS X</strong><br>
    Чтобы установить Git на OS X следует в консоли выполнить следущую команду:</p>
<p><span style="color: #008000;">$ sudo port install git-core</span></p>
<p><strong>2.5. Установка Git на Windows</strong><br>
    Для установки Git на Windows просто скачайте установочные файлы (http://code.google.com/p/msysgit/downloads/list) и
    выполните из них установку.</p>
<p><span id="more-550"></span></p>
        </div>

<div>
    <h2>Установка Git на сервер</h2>

    <p>Для того чтобы приступить к установке любого сервера Git, вы должны экспортировать существующий репозиторий в
        новый “голый” репозиторий, т.е. репозиторий без рабочего каталога. Обычно это несложно сделать. Чтобы
        склонировать ваш репозиторий и создать новый “голый” репозиторий, выполните команду clone с параметром <code>--bare</code>.
        По существующему соглашению, каталоги с голыми репозиториями заканчиваются на <code>.git</code>, например:</p>

<pre><code>$ git clone --bare my_project my_project.git
    Initialized empty Git repository in /opt/projects/my_project.git/</code></pre>

    <p>Вывод этой команды слегка обескураживает. Поскольку <code>clone</code> по сути это <code>git init</code>, а затем
        <code>git fetch</code>, мы видим вывод от <code>git init</code>, который создает пустой каталог. Реальное
        перемещение объектов не имеет вывода, однако оно происходит. Теперь у вас должна быть копия данных из каталога
        Git в каталоге <code>my_project.git</code>.</p>

    <p>Грубо говоря, это что-то наподобие этого:</p>

    <pre><code>$ cp -Rf my_project/.git my_project.git</code></pre>

    <p>Тут есть пара небольших различий в файле конфигурации, но в вашем случае эту разницу можно считать
        несущественной. Можно считать, что в этом случае берется собственно репозиторий Git без рабочего каталога, и
        создается каталог только для него.</p>

    <h3 id="____">Размещение “голого” репозитория на сервере</h3>

    <p>Теперь, когда у вас есть голая копия вашего репозитория, все что вам нужно сделать это поместить ее на сервер и
        настроить протоколы. Условимся, что вы уже настроили сервер <code>git.example.com</code>, имеете к нему доступ
        по SSH и хотите размещать все ваши репозитории Git в каталоге <code>/opt/git</code>. Вы можете добавить ваш
        новый репозиторий копированием голого репозитория:</p>

    <pre><code>$ scp -r my_project.git user@git.example.com:/opt/git</code></pre>

    <p>Теперь другие пользователи, имеющие доступ к серверу по SSH и право на чтение к каталогу <code>/opt/git</code>,
        могут склонировать ваш репозиторий выполнив:</p>

    <pre><code>$ git clone user@git.example.com:/opt/git/my_project.git</code></pre>

    <p>Если у пользователя сервера есть право на запись в каталог <code>/opt/git/my_project.git</code>, он автоматически
        получает возможность отправки изменений в репозиторий. Git автоматически добавит право на запись в репозиторий
        для группы, если вы запустите команду <code>git init</code> с параметром <code>--shared</code>.</p>

<pre><code>$ ssh user@git.example.com
    $ cd /opt/git/my_project.git
    $ git init --bare --shared</code></pre>

    <p>Видите, это просто взять репозиторий Git, создать “голую” версию и поместить ее на сервер, к которому вы и ваши
        коллеги имеете доступ по SSH. Теперь вы готовы работать вместе над одним проектом.</p>

    <p>Важно отметить, что это практически всё, что вам нужно сделать чтобы получить рабочий Git-сервер, к которому
        несколько человек имеют доступ ― просто добавьте учетные записи SSH на сервер, и положите голый репозиторий в
        место, к которому эти пользователи имеют доступ на чтение и запись. И всё.</p>

    <p>Из нескольких последующих разделов вы узнаете, как получить более сложные конфигурации. В том числе как не
        создавать учетные записи для каждого пользователя, как сделать публичный доступ на чтение репозитория, как
        установить веб-интерфейс, как использовать Gitosis, и др. Однако, помните, что для совместной работы пары
        человек на закрытом проекте, всё, что вам <em>нужно</em> ― это SSH-сервер и “голый” репозиторий.</p>

    <h3 id="_">Малые установки</h3>

    <p>Если вы небольшая фирма, или вы только пробуете Git в вашей организации и у вас мало разработчиков, то все
        достаточно просто. Один из наиболее сложных аспектов настройки сервера Git ― управление пользователями. Если вы
        хотите чтобы некоторые репозитории были доступны некоторым пользователям только на чтение, а другие и на чтение
        и на запись, вам может быть не очень просто привести права доступа в порядок.</p>

    <h4 id="ssh_">SSH доступ</h4>

    <p>Если у вас уже есть сервер, к которому все ваши разработчики имеют доступ по SSH, проще всего разместить ваш
        первый репозиторий там, поскольку вам не нужно практически ничего делать (как мы уже обсудили в предыдущем
        разделе). Если вы хотите более сложного управления правами доступа к вашим репозиториям, вы можете сделать это
        обычными правами файловой системы, предоставляемыми операционной системой вашего сервера.</p>

    <p>Если вы хотите разместить ваши репозитории на сервер, на котором нет учетных записей для каждого в вашей команде,
        кому нужен доступ на запись, вы должны настроить доступ по SSH для них. Будем считать, что если у вас есть
        сервер, на котором вы хотите это сделать, то SSH-сервер на нем уже установлен, и через него вы имеете доступ к
        серверу.</p>

    <p>Есть несколько способов дать доступ каждому в вашей команде. Первый — настроить учетные записи для каждого. Это
        просто, но может быть весьма обременительно. Вероятно, вы не захотите для каждого пользователя выполнять <code>adduser</code>
        и задавать временные пароли.</p>

    <p>Второй способ ― создать на машине одного пользователя ‘git’, попросить каждого пользователя, кому нужен доступ на
        запись, прислать вам публичный ключ SSH, и добавить эти ключи в файл <code>~/.ssh/authorized_keys</code> вашего
        нового пользователя ‘git’. Теперь все будут иметь доступ к этой машине через пользователя ‘git’. Это никак не
        повлияет на данные коммита ― пользователь, под которым вы соединяетесь с сервером по SSH, не затрагивает
        сделанные вами коммиты.</p>

    <p>Другой способ сдел

    <div>
        <h2 id="_git__">Установка Git на сервер</h2>

        <p>Для того чтобы приступить к установке любого сервера Git, вы должны экспортировать существующий репозиторий в
            новый “голый” репозиторий, т.е. репозиторий без рабочего каталога. Обычно это несложно сделать. Чтобы
            склонировать ваш репозиторий и создать новый “голый” репозиторий, выполните команду clone с параметром
            <code>--bare</code>. По существующему соглашению, каталоги с голыми репозиториями заканчиваются на <code>.git</code>,
            например:</p>

<pre><code>$ git clone --bare my_project my_project.git
    Initialized empty Git repository in /opt/projects/my_project.git/</code></pre>

        <p>Вывод этой команды слегка обескураживает. Поскольку <code>clone</code> по сути это <code>git init</code>, а
            затем <code>git fetch</code>, мы видим вывод от <code>git init</code>, который создает пустой каталог.
            Реальное перемещение объектов не имеет вывода, однако оно происходит. Теперь у вас должна быть копия данных
            из каталога Git в каталоге <code>my_project.git</code>.</p>

        <p>Грубо говоря, это что-то наподобие этого:</p>

        <pre><code>$ cp -Rf my_project/.git my_project.git</code></pre>

        <p>Тут есть пара небольших различий в файле конфигурации, но в вашем случае эту разницу можно считать
            несущественной. Можно считать, что в этом случае берется собственно репозиторий Git без рабочего каталога, и
            создается каталог только для него.</p>

        <h3 id="____">Размещение “голого” репозитория на сервере</h3>

        <p>Теперь, когда у вас есть голая копия вашего репозитория, все что вам нужно сделать это поместить ее на сервер
            и настроить протоколы. Условимся, что вы уже настроили сервер <code>git.example.com</code>, имеете к нему
            доступ по SSH и хотите размещать все ваши репозитории Git в каталоге <code>/opt/git</code>. Вы можете
            добавить ваш новый репозиторий копированием голого репозитория:</p>

        <pre><code>$ scp -r my_project.git user@git.example.com:/opt/git</code></pre>

        <p>Теперь другие пользователи, имеющие доступ к серверу по SSH и право на чтение к каталогу
            <code>/opt/git</code>, могут склонировать ваш репозиторий выполнив:</p>

        <pre><code>$ git clone user@git.example.com:/opt/git/my_project.git</code></pre>

        <p>Если у пользователя сервера есть право на запись в каталог <code>/opt/git/my_project.git</code>, он
            автоматически получает возможность отправки изменений в репозиторий. Git автоматически добавит право на
            запись в репозиторий для группы, если вы запустите команду <code>git init</code> с параметром
            <code>--shared</code>.</p>

<pre><code>$ ssh user@git.example.com
    $ cd /opt/git/my_project.git
    $ git init --bare --shared</code></pre>

        <p>Видите, это просто взять репозиторий Git, создать “голую” версию и поместить ее на сервер, к которому вы и
            ваши коллеги имеете доступ по SSH. Теперь вы готовы работать вместе над одним проектом.</p>

        <p>Важно отметить, что это практически всё, что вам нужно сделать чтобы получить рабочий Git-сервер, к которому
            несколько человек имеют доступ ― просто добавьте учетные записи SSH на сервер, и положите голый репозиторий
            в место, к которому эти пользователи имеют доступ на чтение и запись. И всё.</p>

        <p>Из нескольких последующих разделов вы узнаете, как получить более сложные конфигурации. В том числе как не
            создавать учетные записи для каждого пользователя, как сделать публичный доступ на чтение репозитория, как
            установить веб-интерфейс, как использовать Gitosis, и др. Однако, помните, что для совместной работы пары
            человек на закрытом проекте, всё, что вам <em>нужно</em> ― это SSH-сервер и “голый” репозиторий.</p>

        <h3 id="_">Малые установки</h3>

        <p>Если вы небольшая фирма, или вы только пробуете Git в вашей организации и у вас мало разработчиков, то все
            достаточно просто. Один из наиболее сложных аспектов настройки сервера Git ― управление пользователями. Если
            вы хотите чтобы некоторые репозитории были доступны некоторым пользователям только на чтение, а другие и на
            чтение и на запись, вам может быть не очень просто привести права доступа в порядок.</p>

        <h4 id="ssh_">SSH доступ</h4>

        <p>Если у вас уже есть сервер, к которому все ваши разработчики имеют доступ по SSH, проще всего разместить ваш
            первый репозиторий там, поскольку вам не нужно практически ничего делать (как мы уже обсудили в предыдущем
            разделе). Если вы хотите более сложного управления правами доступа к вашим репозиториям, вы можете сделать
            это обычными правами файловой системы, предоставляемыми операционной системой вашего сервера.</p>

        <p>Если вы хотите разместить ваши репозитории на сервер, на котором нет учетных записей для каждого в вашей
            команде, кому нужен доступ на запись, вы должны настроить доступ по SSH для них. Будем считать, что если у
            вас есть сервер, на котором вы хотите это сделать, то SSH-сервер на нем уже установлен, и через него вы
            имеете доступ к серверу.</p>

        <p>Есть несколько способов дать доступ каждому в вашей команде. Первый — настроить учетные записи для каждого.
            Это просто, но может быть весьма обременительно. Вероятно, вы не захотите для каждого пользователя выполнять
            <code>adduser</code> и задавать временные пароли.</p>

        <p>Второй способ ― создать на машине одного пользователя ‘git’, попросить каждого пользователя, кому нужен
            доступ на запись, прислать вам публичный ключ SSH, и добавить эти ключи в файл
            <code>~/.ssh/authorized_keys</code> вашего нового пользователя ‘git’. Теперь все будут иметь доступ к этой
            машине через пользователя ‘git’. Это никак не повлияет на данные коммита ― пользователь, под которым вы
            соединяетесь с сервером по SSH, не затрагивает сделанные вами коммиты.</p>

        <p>Другой способ сделать это ― использовать SSH-сервер, аутентифицирующий по LDAP-серверу или любому другому
            централизованному источнику, который у вас может быть уже настроен. Любой способ аутентификации по SSH,
            какой вы только сможете придумать, должен работать, если пользователь может получить доступ к консоли.</p>

    </div>

</div>

<div>
    <h2 id="__ssh">Создание публичного SSH-ключа</h2>

    <p>Как было уже сказано, многие Git-серверы используют аутентификацию по открытым SSH-ключам. Для того чтобы
        предоставить открытый ключ, пользователь должен его сгенерировать, если только это не было сделано ранее. Этот
        процесс похож во всех операционных системах. Сначала, вам стоит убедиться, что у вас еще нет ключа. По умолчанию
        пользовательские SSH-ключи хранятся в каталоге <code>~/.ssh</code> этого пользователя. Вы можете легко
        проверить, есть ли у вас ключ, зайдя в этот каталог и посмотрев его содержимое:</p>

<pre><code>$ cd ~/.ssh
    $ ls
    authorized_keys2 id_dsa known_hosts
    config id_dsa.pub</code></pre>

    <p>Ищите пару файлов с именами “что-нибудь” и “что-нибудь.pub”, где “что-нибудь” обычно <code>id_dsa</code> или
        <code>id_rsa</code>. Файл с расширением <code>.pub</code> - это ваш открытый ключ, а второй файл — ваш закрытый
        ключ. Если у вас нет этих файлов (или даже нет каталога <code>.ssh</code>), вы можете создать их запустив
        программу <code>ssh-keygen</code>, которая входит в состав пакета SSH в системах Linux/Mac, а также поставляется
        в составе MSysGit для Windows:</p>

<pre><code>$ ssh-keygen
    Generating public/private rsa key pair.
    Enter file in which to save the key (/Users/schacon/.ssh/id_rsa):
    Enter passphrase (empty for no passphrase):
    Enter same passphrase again:
    Your identification has been saved in /Users/schacon/.ssh/id_rsa.
    Your public key has been saved in /Users/schacon/.ssh/id_rsa.pub.
    The key fingerprint is:
    43:c5:5b:5f:b1:f1:50:43:ad:20:a6:92:6a:1f:9a:3a schacon@agadorlaptop.local</code></pre>

    <p>Сначала необходимо ввести расположение, для сохранения ключа (<code>.ssh/id_rsa</code>), затем дважды ввести
        пароль, который вы можете оставить пустым, если не хотите его вводить каждый раз, когда используете ключ.</p>

    <p>Теперь, каждый пользователь должен послать свой открытый ключ вам, или тому, кто администрирует Git-сервер
        (предположим, что ваш SSH-сервер уже настроен на работу с открытыми ключами). Для этого им нужно скопировать всё
        содержимое файла с расширением <code>.pub</code> и отправить его по электронной почте. Открытый ключ выглядит
        как-то так:</p>

<pre><code>$ cat ~/.ssh/id_rsa.pub
    ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU
    GPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3
    Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA
    t3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En
    mZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx
    NrRFi9wrf+M7Q== schacon@agadorlaptop.local</code></pre>

    <p>Более подробное руководство по созданию SSH-ключей на различных системах вы можете найти в руководстве GitHub по
        SSH-ключам на <code>http://github.com/guides/providing-your-ssh-key</code>.</p>
            </div>
        </div>


