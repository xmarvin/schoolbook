<div class="p"><h2 class="inline">Git</h2> &mdash;&nbsp;мощная и сложная распределенная система контроля версий. Понимание всех возможностей git открывает для разработчика новые горизонты в управлении исходным кодом. Самый верный способ обучиться владению Git &mdash; испытать его своими руками.</div>
 Git (произн. «гит») — распределённая система управления версиями файлов. Проект был создан Линусом Торвальдсом для управления разработкой ядра Linux. На сегодняшний день поддерживается Джунио Хамано.

Система спроектирована как набор программ, специально разработанных с учётом их использования в скриптах. Это позволяет удобно создавать специализированные системы контроля версий на базе Git или пользовательские интерфейсы. Например, Cogito является именно таким примером фронтенда к репозиториям Git, а StGit использует Git для управления коллекцией патчей.

Git поддерживает быстрое разделение и слияние версий, включает инструменты для визуализации и навигации по нелинейной истории разработки. Как и Darcs, BitKeeper, Mercurial, SVK, Bazaar и Monotone, Git предоставляет каждому разработчику локальную копию всей истории разработки, изменения копируются из одного репозитория в другой.

Удалённый доступ к репозиториям Git обеспечивается git-daemon, gitosis, SSH- или HTTP-сервером. TCP-сервис git-daemon входит в дистрибутив Git и является наряду с SSH наиболее распространённым и надёжным методом доступа. Метод доступа по HTTP, несмотря на ряд ограничений, очень популярен в контролируемых сетях, потому что позволяет использование существующих конфигураций сетевых фильтров.

 <h2><span class="editsection">[<a href="/w/index.php?title=Git&amp;action=edit&amp;section=1" title="Править секцию: Возможности">править</a>]</span> <span class="mw-headline" id=".D0.92.D0.BE.D0.B7.D0.BC.D0.BE.D0.B6.D0.BD.D0.BE.D1.81.D1.82.D0.B8">Возможности</span></h2>
<p>Система спроектирована как набор программ, специально разработанных с учётом их использования в <a href="/wiki/%D0%A1%D0%BA%D1%80%D0%B8%D0%BF%D1%82%D0%BE%D0%B2%D1%8B%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA" title="Скриптовый язык">скриптах</a>. Это позволяет удобно создавать специализированные системы контроля версий на базе Git или пользовательские интерфейсы. Например, <a href="/w/index.php?title=Cogito_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%BD%D1%8B%D0%B9_%D0%BF%D1%80%D0%BE%D0%B4%D1%83%D0%BA%D1%82)&amp;action=edit&amp;redlink=1" class="new" title="Cogito (программный продукт) (страница отсутствует)">Cogito</a> является именно таким примером фронтенда к репозиториям Git, а <a href="/w/index.php?title=StGit&amp;action=edit&amp;redlink=1" class="new" title="StGit (страница отсутствует)">StGit</a> использует Git для управления коллекцией <a href="/wiki/%D0%9F%D0%B0%D1%82%D1%87" title="Патч">патчей</a>.</p>
<p>Git поддерживает быстрое разделение и слияние версий, включает инструменты для визуализации и навигации по нелинейной истории разработки. Как и <a href="/wiki/Darcs" title="Darcs">Darcs</a>, <a href="/w/index.php?title=BitKeeper&amp;action=edit&amp;redlink=1" class="new" title="BitKeeper (страница отсутствует)">BitKeeper</a>, <a href="/wiki/Mercurial" title="Mercurial">Mercurial</a>, <a href="/wiki/Bazaar" title="Bazaar">Bazaar</a> и <a href="/w/index.php?title=Monotone&amp;action=edit&amp;redlink=1" class="new" title="Monotone (страница отсутствует)">Monotone</a>, Git предоставляет каждому разработчику локальную копию всей истории разработки, изменения копируются из одного репозитория в другой.</p>
<p>Удалённый доступ к репозиториям Git обеспечивается git-daemon, <a href="/wiki/SSH" title="SSH">SSH</a>- или <a href="/wiki/HTTP" title="HTTP">HTTP</a>-сервером. TCP-сервис git-daemon входит в дистрибутив Git и является наряду с SSH наиболее распространённым и надёжным методом доступа. Метод доступа по HTTP, несмотря на ряд ограничений, очень популярен в контролируемых сетях, потому что позволяет использовать существующие конфигурации сетевых фильтров.</p>
<h2><span class="editsection">[<a href="/w/index.php?title=Git&amp;action=edit&amp;section=2" title="Править секцию: Особенности, преимущества и недостатки">править</a>]</span> <span class="mw-headline" id=".D0.9E.D1.81.D0.BE.D0.B1.D0.B5.D0.BD.D0.BD.D0.BE.D1.81.D1.82.D0.B8.2C_.D0.BF.D1.80.D0.B5.D0.B8.D0.BC.D1.83.D1.89.D0.B5.D1.81.D1.82.D0.B2.D0.B0_.D0.B8_.D0.BD.D0.B5.D0.B4.D0.BE.D1.81.D1.82.D0.B0.D1.82.D0.BA.D0.B8">Особенности, преимущества и недостатки</span></h2>
<p>Преимущества и недостатки git по сравнению с централизованными системами управления версиями (такими как, например, Subversion) типичны для любой распределённой системы и описаны в статье «<a href="/wiki/%D0%A1%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0_%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F_%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8" title="Система управления версиями">Система управления версиями</a>». Если же сравнивать git с «родственными» ей распределёнными системами, можно отметить, что git изначально идеологически ориентирован на работу с изменениями, а не с файлами, «единицей обработки» для него является набор изменений, или патч. Эта особенность прослеживается как в структуре самой системы (в частности&#160;— в структуре репозитория), так и в принципах построения команд; она отражается на производительности системы в различных вариантах её использования и на достоинствах и недостатках git по сравнению с другими DVCS.</p>
<p>Часто называемые преимущества git перед другими DVCS:</p>
<ul>
<li>Высокая производительность.</li>
<li>Развитые средства интеграции с другими VCS, в частности, с CVS, SVN и Mercurial. Помимо разнонаправленных конвертеров репозиториев, имеющиеся в комплекте программные средства позволяют разработчикам использовать git при размещении центрального репозитория в SVN или CVS, кроме того, git может имитировать cvs-сервер, обеспечивая работу через клиентские приложения и поддержку в средах разработки, специально не поддерживающих git.</li>
<li>Продуманная система команд, позволяющая удобно встраивать git в скрипты.</li>
<li>Качественный веб-интерфейс «из коробки».</li>
<li>Репозитории git могут распространяться и обновляться общесистемными файловыми утилитами архивации и обновления, такими как <a href="/wiki/Rsync" title="Rsync">rsync</a>, благодаря тому, что фиксации изменений и синхронизации не меняют существующие файлы с данными, а только добавляют новые (за исключением некоторых служебных файлов, которые могут быть автоматически обновлены с помощью имеющихся в составе системы утилит). Для раздачи репозитория по сети достаточно любого веб-сервера.</li>
</ul>
<p>В числе недостатков git обычно называют:</p>
<ul>
<li>Некоторое неудобство для пользователей, переходящих с других VCS. Команды git, ориентированные на наборы изменений, а не на файлы, могут вызвать недоумение у пользователей, привыкших к файл-ориентированным VCS, таким как SVN. Например, команда «add», которая в большинстве систем управления версиями производит добавление файла к проекту, в git делает совершенно другое: она находит и подготавливает к фиксации (commit’у) сделанные в проекте или его части изменения (то есть её название «добавить» относится не к файлам, а к сделанным изменениям, которые добавляются в индекс для последующей фиксации).</li>
<li>Использование для идентификации ревизий хэшей SHA1, что приводит к необходимости оперировать длинными строками вместо коротких номеров версий, как во многих других системах.</li>
<li>Бо́льшие накладные расходы при работе с проектами, в которых делаются многочисленные несвязанные между собой изменения файлов. При работе в таком режиме размеры наборов изменений становятся достаточно велики и происходит быстрый рост репозиториев.</li>
<li>Бо́льшие затраты времени, по сравнению с файл-ориентированными системами, на формирование истории конкретного файла, истории правок конкретного пользователя, поиска изменений, относящихся к заданному месту определённого файла.</li>
<li>Отсутствие отдельной команды переименования/переноса файла, из-за чего подобная операция отражается в истории как удаление файла и создание его в другом месте, что требует специального анализа для определения, что в действительности файл был просто перенесён.</li>
<li>Система не умеет отслеживать пустые каталоги.</li>
<li>Некоторые команды работают неожиданно, в частности, могут приводить к неочевидным ошибкам или требовать для правильной работы указания специальных параметров, когда применяются к исходно пустому репозиторию или к репозиторию, в котором ещё не было сделано ни одного коммита.</li>
</ul>
<p>В ряде публикаций, относящихся преимущественно к 2005—2008 годам можно встретить также нарекания в отношении документации git, отсутствия удобной windows-версии и удобных графических клиентов. В настоящее время эта критика неактуальна: существует версия git на основе MinGW («родная» сборка под Windows), и несколько высококачественных графических клиентов для различных операционных систем, в частности, под Windows имеется клиент <a href="/wiki/TortoiseGit" title="TortoiseGit">TortoiseGit</a>, идеологически очень близкий к широко распространённому <a href="/wiki/TortoiseSVN" title="TortoiseSVN">TortoiseSVN</a>&#160;— клиенту SVN, встраиваемому в оболочку Windows.</p>