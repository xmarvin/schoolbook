<div class="clearfix" id="page">

      
      
                    <h1 class="page-title">6. Индексация изменений</h1>
                        
                    <div class="region region-content">
    <div class="block-system" id="block-system-main">

    
  <div class="content">
    <div typeof="sioc:Item foaf:Document" about="/staging_changes" class="node node-book clearfix" id="node-7">

  <div class="node-header">
            
      </div> <!-- /.node-header -->

  <div class="content clearfix">
        <div class="field field-name-body field-type-text-with-summary field-label-hidden"><div class="field-items"><div property="content:encoded" class="field-item even"><h3>Цели</h3>
<ul><li>Научиться индексировать изменения для последующих коммитов</li>
</ul><h2><em>01</em> Добавьте изменения</h2>
<p>Теперь дайте команду git проиндексировать изменения. Проверьте состояние</p>
<h4>Выполните:</h4>
<pre class="instructions">git add hello.html
git status</pre>

<p>Вы увидите…</p>

<h4>Результат:</h4>

<pre class="sample">$ git add hello.html
$ git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD &lt;file&gt;..." to unstage)
#
#	modified:   hello.html
#</pre>

<p>Изменения файла <code>hello.html</code> были проиндексированы. Это означает, что git теперь знает об изменении, но изменение пока не <em>перманентно</em> (читай, <em>навсегда</em>) записано в репозиторий&#8203;. Следующий коммит будет включать в себя проиндексированные изменения.</p>

<p>Если вы решили, что <em>не</em> хотите коммитить изменения, команда состояния напомнит вам о том, что с помощью команды <code>git reset</code> можно снять индексацию этих изменений.</p></div></div></div>  <div class="book-navigation" id="book-navigation-1">

    
  </div>
  </div>

  
</div>
  </div>
</div>
  </div>
        <div class="region region-content-bottom">
    <div class="block block-block" id="block-block-4">

    
  <div class="content">
    <div style="left: 390px;position: absolute;top: -50px;"><div id="___plusone_0" style="height: 20px; width: 90px; display: inline-block; text-indent: 0pt; margin: 0pt; padding: 0pt; background: none repeat scroll 0% 0% transparent; border-style: none; float: none; line-height: normal; font-size: 1px; vertical-align: baseline;"><iframe width="100%" scrolling="no" frameborder="0" title="+1" vspace="0" tabindex="-1" style="position: static; left: 0pt; top: 0pt; width: 90px; margin: 0px; border-style: none; height: 20px; visibility: visible;" src="https://plusone.google.com/u/0/_/+1/fastbutton?url=http%3A%2F%2Fgithowto.com%2Fstaging_changes&amp;size=medium&amp;count=true&amp;annotation=&amp;hl=en-US&amp;jsh=r%3Bgc%2F24479126-6666cb8c#id=I1_1319297427479&amp;parent=http%3A%2F%2Fgithowto.com&amp;rpctoken=190927361&amp;_methods=onPlusOne%2C_ready%2C_close%2C_open%2C_resizeMe" name="I1_1319297427479" marginwidth="0" marginheight="0" id="I1_1319297427479" hspace="0" allowtransparency="true"></iframe></div></div>  </div>
</div>
<div class="block block-block" id="block-block-3">

    
  <div class="content">
    <div style="left:480px;position: absolute;top: -50px;"><iframe scrolling="no" frameborder="0" allowtransparency="true" src="http://platform.twitter.com/widgets/tweet_button.html#_=1319297427117&amp;count=horizontal&amp;id=twitter_tweet_button_0&amp;lang=en&amp;original_referer=http%3A%2F%2Fgithowto.com%2Fstaging_changes&amp;text=%D0%A1%D1%83%D0%BF%D0%B5%D1%80-%D1%82%D1%83%D1%80-%D0%BE%D0%B1%D1%83%D1%87%D0%B0%D0%BB%D0%BA%D0%B0%20GIT&amp;url=http%3A%2F%2Fgithowto.com%2F&amp;via=githowto" class="twitter-share-button twitter-count-horizontal" style="width: 110px; height: 20px;" title="Twitter For Websites: Tweet Button"></iframe>
<script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script></div>  </div>
</div>
<div class="block block-block" id="block-block-1">

    
  <div class="content">
    <div style="left: 700px;position: absolute;top: -50px;">
<iframe scrolling="no" frameborder="0" allowtransparency="true" style="border:none; overflow:hidden; width:150px; height:21px;" src="http://www.facebook.com/plugins/like.php?app_id=245589052121813&amp;href=http%3A%2F%2Fgithowto.com%2F&amp;send=false&amp;layout=button_count&amp;width=150&amp;show_faces=false&amp;action=like&amp;colorscheme=light&amp;font=arial&amp;height=21"></iframe>
</div>  </div>
</div>
<div class="block block-block" id="block-block-2">

    
  <div class="content">
    <div style="left: 600px;position: absolute;top: -50px;">
<div id="vk_like" style="width: 100px; background: none repeat scroll 0% 0% transparent; height: 22px; position: relative; clear: both;"><iframe width="100%" scrolling="no" height="22px" frameborder="0" name="fXD32ff4" style="height: 22px; width: 100px; overflow: hidden; z-index: 150;" src="http://vkontakte.ru/widget_like.php?app=2272805&amp;width=100%&amp;page=0&amp;url=http%3A%2F%2Fgithowto.com%2Fstaging_changes&amp;type=mini&amp;verb=1&amp;title=6.%20%D0%98%D0%BD%D0%B4%D0%B5%D0%BA%D1%81%D0%B0%D1%86%D0%B8%D1%8F%20%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D0%B9%20%7C%20Git%20How%20To&amp;description=Git%20How%20To%20%E2%80%94%20%D1%8D%D1%82%D0%BE%20%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D0%B0%D0%BA%D1%82%D0%B8%D0%B2%D0%BD%D1%8B%D0%B9%20%D1%82%D1%83%D1%80%2C%20%D0%BA%D0%BE%D1%82%D0%BE%D1%80%D1%8B%D0%B9%20%D0%BF%D0%BE%D0%B7%D0%BD%D0%B0%D0%BA%D0%BE%D0%BC%D0%B8%D1%82%20%D0%B2%D0%B0%D1%81%20%D1%81%20%D0%BE%D1%81%D0%BD%D0%BE%D0%B2%D0%B0%D0%BC%D0%B8%20Git.%20%D0%A2%D1%83%D1%80%20%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%20%D1%81%20%D0%BF%D0%BE%D0%BD%D0%B8%D0%BC%D0%B0%D0%BD%D0%B8%D0%B5%D0%BC%20%D1%82%D0%BE%D0%B3%D0%BE%2C%20%D1%87%D1%82%D0%BE%20%D0%BB%D1%83%D1%87%D1%88%D0%B8%D0%BC%20%D1%81%D0%BF%D0%BE%D1%81%D0%BE%D0%B1%D0%BE%D0%BC%20%D0%BD%D0%B0%D1%83%D1%87%D0%B8%D1%82%D1%8C%D1%81%D1%8F%20%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D1%8C%20Git%20%E2%80%94%20%D0%BF%D0%BE%D0%BF%D1%80%D0%BE%D0%B1...&amp;image=" id="vkwidget1"></iframe></div>
</div>  </div>
</div>
  </div>
          </div>


        <h2> ИНДЕКСАЦИЯ И КОММИТ </h2>

        <p>
Отдельный шаг индексации в git позволяет вам продолжать вносить изменения в рабочий каталог, а затем, в момент, когда вы захотите взаимодействовать с версионным контролем, git позволит записать изменения в малых коммитах, которые фиксируют то, что вы сделали.
           </p>      <p>
Предположим, что вы отредактировали три файла (a.html, b.html, and c.html). Теперь вы хотите закоммитить все изменения, при этом чтобы изменения в a.html и b.html были одним коммитом, в то время как изменения в c.html логически не связаны с первыми двумя файлами и должны идти отдельным коммитом.
           </p>
        <p>
В теории, вы можете сделать следующее:
           </p>
        <div>
git add a.html
git add b.html
git commit -m "Changes for a and b"
git add c.html
git commit -m "Unrelated change to c"
            </div>
        <p>
Разделяя индексацию и коммит, вы имеете возможность с легкостью настроить, что идет в какой коммит.
            </p>


           <div id="page" class="clearfix">



                    <h1 class="page-title">8. Коммит изменений</h1>

                    <div class="region region-content">
    <div id="block-system-main" class="block-system">


  <div class="content">
    <div id="node-9" class="node node-book clearfix" about="/commiting_changes" typeof="sioc:Item foaf:Document">

  <div class="node-header">

      </div> <!-- /.node-header -->

  <div class="content clearfix">
        <div class="field field-name-body field-type-text-with-summary field-label-hidden"><div class="field-items"><div class="field-item even" property="content:encoded"><h3>Цели</h3>
<ul><li>Научиться коммитить изменения в репозиторий</li>
</ul><h2><em>01</em> Закоммитьте изменения</h2>
<p>Достаточно об индексации. Давайте сделаем коммит того, что мы проиндексировали, в репозиторий.</p>
<p>Когда вы ранее использовали <code>git commit</code> для коммита первоначальной версии файла <code>hello.html</code> в репозиторий, вы включили метку <code>-m</code>, которая делает комментарий в командной строке. Команда commit позволит вам интерактивно редактировать комментарии для коммита. Теперь давайте это проверим.</p>
<p>Если вы опустите метку <code>-m</code> из командной строки, git перенесет вас в редактор по вашему выбору. Редактор выбирается из следующего списка (в порядке приоритета):</p>
<ul><li>переменная среды <span class="caps">GIT_EDITOR</span></li>
<li>параметр конфигурации core.editor</li>
<li>переменная среды <span class="caps">VISUAL</span></li>
<li>переменная среды <span class="caps">EDITOR</span></li>
</ul><p>У меня переменная <span class="caps">EDITOR</span> установлена в <code>emacsclient</code> (доступен для Linux и Mac).</p>
<p>Сделайте коммит сейчас и проверьте состояние.</p>
<h4>Выполните:</h4>
<pre class="instructions">git commit</pre>

<p>Вы увидите в вашем редакторе:</p>

<h4>Результат:</h4>

<pre class="sample">|
# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Changes to be committed:
#   (use "git reset HEAD &lt;file&gt;..." to unstage)
#
#	modified:   hello.html
#</pre>

<p>В первой строке введите комментарий: «Added h1 tag». Сохраните файл и выйдите из редактора. Вы увидите…</p>

<h4>Результат:</h4>

<pre class="sample">git commit
Waiting for Emacs...
[master 569aa96] Added h1 tag
 1 files changed, 1 insertions(+), 1 deletions(-)</pre>

<p>Строка «Waiting for Emacs…» получена из программы <code>emacsclient</code>, которая посылает файл в запущенную программу emacs и ждет его закрытия. Остальные выходные данные – стандартные коммит-сообщения.</p>

<h2><em>02</em> Проверьте состояние</h2>

<p>В конце давайте еще раз проверим состояние.</p>

<h4>Выполните:</h4>

<pre class="instructions">git status</pre>

<p>Вы увидите…</p>

<h4>Результат:</h4>

<pre class="sample">$ git status
# On branch master
nothing to commit (working directory clean)</pre>

<p>Рабочий каталог чистый, можете продолжить работу.</p></div></div></div>
      </div>
        </div>
      </div>
        </div>
                        </div>
               </div>

        <div class="clearfix">



                    <h1 class="page-title">9. Изменения, а не файлы</h1>

                    <div class="region region-content">
    <div id="block-system-main" class="block-system">


  <div class="content">
    <div id="node-10" class="node node-book clearfix" about="/changes_not_files" typeof="sioc:Item foaf:Document">

  <div class="node-header">

      </div> <!-- /.node-header -->

  <div class="content clearfix">
        <div class="field field-name-body field-type-text-with-summary field-label-hidden"><div class="field-items"><div class="field-item even" property="content:encoded"><h3>Цели</h3>
<ul><li>Понять, что git работает с изменениями, а не файлами.</li>
</ul><p>Большинство систем версионного контроля работают с файлами. Вы добавляете файл в версионный контроль, а система отслеживает изменения файла с этого момента.</p>
<p>Git фокусируется на изменениях в файле, а не самом файле. Когда вы осуществляете команду <code>git add file</code>,  вы не говорите git добавить файл в репозиторий. Скорее вы говорите, что git надо отметить текущее состояние файла, коммит которого будет произведен позже.</p>
<p>Мы попытаемся исследовать эту разницу в данном уроке.</p>
<h2><em>01</em> Первое изменение: Добавьте стандартные теги страницы</h2>
<p>Измените страницу «Hello, World», чтобы она содержала стандартные теги <code>&lt;html&gt;</code> и <code>&lt;body&gt;</code>.</p>
<h4>Файл: <em>hello.html</em></h4>
<pre class="file"><strong>&lt;html&gt;
  &lt;body&gt;</strong>
    &lt;h1&gt;Hello, World!&lt;/h1&gt;
  <strong>&lt;/body&gt;
&lt;/html&gt;</strong></pre>

<h2><em>02</em> Добавьте это изменение</h2>

<p>Теперь добавьте это изменение в индекс git.</p>

<h4>Выполните:</h4>

<pre class="instructions">git add hello.html</pre>

<h2><em>03</em> Второе изменение: Добавьте заголовки HTML</h2>

<p>Теперь добавьте заголовки HTML (секцию <code>&lt;head&gt;</code>) к странице «Hello, World».</p>

<h4>Файл: <em>hello.html</em></h4>

<pre class="file">&lt;html&gt;
<strong>  &lt;head&gt;
  &lt;/head&gt;</strong>
  &lt;body&gt;
    &lt;h1&gt;Hello, World!&lt;/h1&gt;
  &lt;/body&gt;
&lt;/html&gt;</pre>

<h2><em>04</em> Проверьте текущий статус</h2>

<h4>Выполните:</h4>

<pre class="instructions">git status</pre>

<p>Вы увидите…</p>

<h4>Результат:</h4>

<pre class="sample">$ git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD &lt;file&gt;..." to unstage)
#
#	modified:   hello.html
#
# Changes not staged for commit:
#   (use "git add &lt;file&gt;..." to update what will be committed)
#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
#
#	modified:   hello.html
#</pre>

<p>Обратите внимание на то, что <code>hello.html</code> указан дважды в состоянии. Первое изменение (добавление стандартных тегов) проиндексировано и готово к коммиту. Второе изменение (добавление заголовков HTML) является непроиндексированным. Если бы вы делали коммит сейчас, заголовки не были бы сохранены в репозиторий.</p>

<p>Давайте проверим.</p>

<h2><em>05</em> Коммит</h2>

<p>Произведите коммит проиндексированного изменения (значение по умолчанию), а затем еще раз проверьте состояние.</p>

<h4>Выполните:</h4>

<pre class="instructions">git commit -m "Added standard HTML page tags"
git status</pre>

<p>Вы увидите…</p>

<h4>Результат:</h4>

<pre class="sample">$ git commit -m "Added standard HTML page tags"
[master 8c32287] Added standard HTML page tags
 1 files changed, 3 insertions(+), 1 deletions(-)
$ git status
# On branch master
# Changes not staged for commit:
#   (use "git add &lt;file&gt;..." to update what will be committed)
#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
#
#	modified:   hello.html
#
no changes added to commit (use "git add" and/or "git commit -a")</pre>

<p>Состояние команды говорит о том, что <code>hello.html</code> имеет незафиксированные изменения, но уже не в буферной зоне.</p>

<h2><em>06</em> Добавьте второе изменение</h2>

<p>Теперь добавьте второе изменение в индекс, а затем проверьте состояние с помощью команды <code>git status</code>.</p>

<h4>Выполните:</h4>

<pre class="instructions">git add .
git status</pre>

<p class="note"><strong>Примечание:</strong> В качестве файла для добавления, мы использовали текущий каталог («.»). Это самый краткий и удобный путь для добавления всех изменений в файлы текущего каталога и его подкаталоги. Но поскольку он добавляет все, <em>не лишним</em> будет проверить состояние перед запуском <code>add</code>, просто чтобы убедиться, что вы не добавили какой-то файл, который добавлять было не нужно.</p>

<p class="note">Я хотела показать вам трюк с <code>add</code>, далее мы будем на всякий случай продолжать добавлять явные файлы.</p>

<p>Вы увидите…</p>

<h4>Результат:</h4>

<pre class="sample">$ git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD &lt;file&gt;..." to unstage)
#
#	modified:   hello.html
#</pre>

<p>Второе изменение было проиндексировано и готово к коммиту.</p>

<h2><em>07</em> Сделайте коммит второго изменения</h2>

<h4>Выполните:</h4>

<pre class="instructions">git commit -m "Added HTML header"</pre></div></div></div>
      </div>
        </div>
      </div>
        </div>
                        </div>
            </div>
